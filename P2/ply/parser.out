Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> expr expr
Rule 2     expr -> CHAR
Rule 3     expr -> expr DASH expr
Rule 4     expr -> expr STAR
Rule 5     expr -> expr UNION expr
Rule 6     expr -> LPAREN expr RPAREN
Rule 7     statement -> expr

Terminals, with rules where they appear

CHAR                 : 2
DASH                 : 3
LPAREN               : 6
RPAREN               : 6
STAR                 : 4
UNION                : 5
error                : 

Nonterminals, with rules where they appear

expr                 : 1 1 3 3 4 5 5 6 7 0
statement            : 

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

    CHAR            shift and go to state 3
    LPAREN          shift and go to state 2

    expr                           shift and go to state 1

state 1

    (0) S' -> expr .
    (1) expr -> expr . expr
    (3) expr -> expr . DASH expr
    (4) expr -> expr . STAR
    (5) expr -> expr . UNION expr
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

    DASH            shift and go to state 5
    STAR            shift and go to state 7
    UNION           shift and go to state 6
    CHAR            shift and go to state 3
    LPAREN          shift and go to state 2

    expr                           shift and go to state 4

state 2

    (6) expr -> LPAREN . expr RPAREN
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

    CHAR            shift and go to state 3
    LPAREN          shift and go to state 2

    expr                           shift and go to state 8

state 3

    (2) expr -> CHAR .

    DASH            reduce using rule 2 (expr -> CHAR .)
    STAR            reduce using rule 2 (expr -> CHAR .)
    UNION           reduce using rule 2 (expr -> CHAR .)
    CHAR            reduce using rule 2 (expr -> CHAR .)
    LPAREN          reduce using rule 2 (expr -> CHAR .)
    $end            reduce using rule 2 (expr -> CHAR .)
    RPAREN          reduce using rule 2 (expr -> CHAR .)


state 4

    (1) expr -> expr expr .
    (1) expr -> expr . expr
    (3) expr -> expr . DASH expr
    (4) expr -> expr . STAR
    (5) expr -> expr . UNION expr
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

  ! shift/reduce conflict for DASH resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for UNION resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    $end            reduce using rule 1 (expr -> expr expr .)
    RPAREN          reduce using rule 1 (expr -> expr expr .)
    DASH            shift and go to state 5
    STAR            shift and go to state 7
    UNION           shift and go to state 6
    CHAR            shift and go to state 3
    LPAREN          shift and go to state 2

  ! DASH            [ reduce using rule 1 (expr -> expr expr .) ]
  ! STAR            [ reduce using rule 1 (expr -> expr expr .) ]
  ! UNION           [ reduce using rule 1 (expr -> expr expr .) ]
  ! CHAR            [ reduce using rule 1 (expr -> expr expr .) ]
  ! LPAREN          [ reduce using rule 1 (expr -> expr expr .) ]

    expr                           shift and go to state 4

state 5

    (3) expr -> expr DASH . expr
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

    CHAR            shift and go to state 3
    LPAREN          shift and go to state 2

    expr                           shift and go to state 9

state 6

    (5) expr -> expr UNION . expr
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

    CHAR            shift and go to state 3
    LPAREN          shift and go to state 2

    expr                           shift and go to state 10

state 7

    (4) expr -> expr STAR .

    DASH            reduce using rule 4 (expr -> expr STAR .)
    STAR            reduce using rule 4 (expr -> expr STAR .)
    UNION           reduce using rule 4 (expr -> expr STAR .)
    CHAR            reduce using rule 4 (expr -> expr STAR .)
    LPAREN          reduce using rule 4 (expr -> expr STAR .)
    $end            reduce using rule 4 (expr -> expr STAR .)
    RPAREN          reduce using rule 4 (expr -> expr STAR .)


state 8

    (6) expr -> LPAREN expr . RPAREN
    (1) expr -> expr . expr
    (3) expr -> expr . DASH expr
    (4) expr -> expr . STAR
    (5) expr -> expr . UNION expr
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

    RPAREN          shift and go to state 11
    DASH            shift and go to state 5
    STAR            shift and go to state 7
    UNION           shift and go to state 6
    CHAR            shift and go to state 3
    LPAREN          shift and go to state 2

    expr                           shift and go to state 4

state 9

    (3) expr -> expr DASH expr .
    (1) expr -> expr . expr
    (3) expr -> expr . DASH expr
    (4) expr -> expr . STAR
    (5) expr -> expr . UNION expr
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

    DASH            reduce using rule 3 (expr -> expr DASH expr .)
    UNION           reduce using rule 3 (expr -> expr DASH expr .)
    CHAR            reduce using rule 3 (expr -> expr DASH expr .)
    LPAREN          reduce using rule 3 (expr -> expr DASH expr .)
    $end            reduce using rule 3 (expr -> expr DASH expr .)
    RPAREN          reduce using rule 3 (expr -> expr DASH expr .)
    STAR            shift and go to state 7

  ! STAR            [ reduce using rule 3 (expr -> expr DASH expr .) ]
  ! DASH            [ shift and go to state 5 ]
  ! UNION           [ shift and go to state 6 ]
  ! CHAR            [ shift and go to state 3 ]
  ! LPAREN          [ shift and go to state 2 ]

    expr                           shift and go to state 4

state 10

    (5) expr -> expr UNION expr .
    (1) expr -> expr . expr
    (3) expr -> expr . DASH expr
    (4) expr -> expr . STAR
    (5) expr -> expr . UNION expr
    (1) expr -> . expr expr
    (2) expr -> . CHAR
    (3) expr -> . expr DASH expr
    (4) expr -> . expr STAR
    (5) expr -> . expr UNION expr
    (6) expr -> . LPAREN expr RPAREN

    UNION           reduce using rule 5 (expr -> expr UNION expr .)
    CHAR            reduce using rule 5 (expr -> expr UNION expr .)
    LPAREN          reduce using rule 5 (expr -> expr UNION expr .)
    $end            reduce using rule 5 (expr -> expr UNION expr .)
    RPAREN          reduce using rule 5 (expr -> expr UNION expr .)
    DASH            shift and go to state 5
    STAR            shift and go to state 7

  ! DASH            [ reduce using rule 5 (expr -> expr UNION expr .) ]
  ! STAR            [ reduce using rule 5 (expr -> expr UNION expr .) ]
  ! UNION           [ shift and go to state 6 ]
  ! CHAR            [ shift and go to state 3 ]
  ! LPAREN          [ shift and go to state 2 ]

    expr                           shift and go to state 4

state 11

    (6) expr -> LPAREN expr RPAREN .

    DASH            reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    STAR            reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    UNION           reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    CHAR            reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 6 (expr -> LPAREN expr RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DASH in state 4 resolved as shift
WARNING: shift/reduce conflict for STAR in state 4 resolved as shift
WARNING: shift/reduce conflict for UNION in state 4 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 4 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 4 resolved as shift
