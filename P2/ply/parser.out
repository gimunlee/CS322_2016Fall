Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> chunk
Rule 2     expr -> expr UNION chunk
Rule 3     chunk -> term
Rule 4     chunk -> chunk term
Rule 5     term -> CHAR
Rule 6     term -> term STAR
Rule 7     term -> LPAREN expr RPAREN
Rule 8     term -> LPAREN RPAREN

Terminals, with rules where they appear

CHAR                 : 5
LPAREN               : 7 8
RPAREN               : 7 8
STAR                 : 6
UNION                : 2
error                : 

Nonterminals, with rules where they appear

chunk                : 1 2 4
expr                 : 2 7 0
term                 : 3 4 6

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . chunk
    (2) expr -> . expr UNION chunk
    (3) chunk -> . term
    (4) chunk -> . chunk term
    (5) term -> . CHAR
    (6) term -> . term STAR
    (7) term -> . LPAREN expr RPAREN
    (8) term -> . LPAREN RPAREN

    CHAR            shift and go to state 4
    LPAREN          shift and go to state 2

    chunk                          shift and go to state 3
    term                           shift and go to state 5
    expr                           shift and go to state 1

state 1

    (0) S' -> expr .
    (2) expr -> expr . UNION chunk

    UNION           shift and go to state 6


state 2

    (7) term -> LPAREN . expr RPAREN
    (8) term -> LPAREN . RPAREN
    (1) expr -> . chunk
    (2) expr -> . expr UNION chunk
    (3) chunk -> . term
    (4) chunk -> . chunk term
    (5) term -> . CHAR
    (6) term -> . term STAR
    (7) term -> . LPAREN expr RPAREN
    (8) term -> . LPAREN RPAREN

    RPAREN          shift and go to state 8
    CHAR            shift and go to state 4
    LPAREN          shift and go to state 2

    chunk                          shift and go to state 3
    term                           shift and go to state 5
    expr                           shift and go to state 7

state 3

    (1) expr -> chunk .
    (4) chunk -> chunk . term
    (5) term -> . CHAR
    (6) term -> . term STAR
    (7) term -> . LPAREN expr RPAREN
    (8) term -> . LPAREN RPAREN

    UNION           reduce using rule 1 (expr -> chunk .)
    $end            reduce using rule 1 (expr -> chunk .)
    RPAREN          reduce using rule 1 (expr -> chunk .)
    CHAR            shift and go to state 4
    LPAREN          shift and go to state 2

    term                           shift and go to state 9

state 4

    (5) term -> CHAR .

    STAR            reduce using rule 5 (term -> CHAR .)
    CHAR            reduce using rule 5 (term -> CHAR .)
    LPAREN          reduce using rule 5 (term -> CHAR .)
    RPAREN          reduce using rule 5 (term -> CHAR .)
    UNION           reduce using rule 5 (term -> CHAR .)
    $end            reduce using rule 5 (term -> CHAR .)


state 5

    (3) chunk -> term .
    (6) term -> term . STAR

    CHAR            reduce using rule 3 (chunk -> term .)
    LPAREN          reduce using rule 3 (chunk -> term .)
    UNION           reduce using rule 3 (chunk -> term .)
    $end            reduce using rule 3 (chunk -> term .)
    RPAREN          reduce using rule 3 (chunk -> term .)
    STAR            shift and go to state 10


state 6

    (2) expr -> expr UNION . chunk
    (3) chunk -> . term
    (4) chunk -> . chunk term
    (5) term -> . CHAR
    (6) term -> . term STAR
    (7) term -> . LPAREN expr RPAREN
    (8) term -> . LPAREN RPAREN

    CHAR            shift and go to state 4
    LPAREN          shift and go to state 2

    chunk                          shift and go to state 11
    term                           shift and go to state 5

state 7

    (7) term -> LPAREN expr . RPAREN
    (2) expr -> expr . UNION chunk

    RPAREN          shift and go to state 12
    UNION           shift and go to state 6


state 8

    (8) term -> LPAREN RPAREN .

    STAR            reduce using rule 8 (term -> LPAREN RPAREN .)
    CHAR            reduce using rule 8 (term -> LPAREN RPAREN .)
    LPAREN          reduce using rule 8 (term -> LPAREN RPAREN .)
    RPAREN          reduce using rule 8 (term -> LPAREN RPAREN .)
    UNION           reduce using rule 8 (term -> LPAREN RPAREN .)
    $end            reduce using rule 8 (term -> LPAREN RPAREN .)


state 9

    (4) chunk -> chunk term .
    (6) term -> term . STAR

    CHAR            reduce using rule 4 (chunk -> chunk term .)
    LPAREN          reduce using rule 4 (chunk -> chunk term .)
    UNION           reduce using rule 4 (chunk -> chunk term .)
    $end            reduce using rule 4 (chunk -> chunk term .)
    RPAREN          reduce using rule 4 (chunk -> chunk term .)
    STAR            shift and go to state 10


state 10

    (6) term -> term STAR .

    STAR            reduce using rule 6 (term -> term STAR .)
    CHAR            reduce using rule 6 (term -> term STAR .)
    LPAREN          reduce using rule 6 (term -> term STAR .)
    RPAREN          reduce using rule 6 (term -> term STAR .)
    UNION           reduce using rule 6 (term -> term STAR .)
    $end            reduce using rule 6 (term -> term STAR .)


state 11

    (2) expr -> expr UNION chunk .
    (4) chunk -> chunk . term
    (5) term -> . CHAR
    (6) term -> . term STAR
    (7) term -> . LPAREN expr RPAREN
    (8) term -> . LPAREN RPAREN

    UNION           reduce using rule 2 (expr -> expr UNION chunk .)
    $end            reduce using rule 2 (expr -> expr UNION chunk .)
    RPAREN          reduce using rule 2 (expr -> expr UNION chunk .)
    CHAR            shift and go to state 4
    LPAREN          shift and go to state 2

    term                           shift and go to state 9

state 12

    (7) term -> LPAREN expr RPAREN .

    STAR            reduce using rule 7 (term -> LPAREN expr RPAREN .)
    CHAR            reduce using rule 7 (term -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 7 (term -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 7 (term -> LPAREN expr RPAREN .)
    UNION           reduce using rule 7 (term -> LPAREN expr RPAREN .)
    $end            reduce using rule 7 (term -> LPAREN expr RPAREN .)

